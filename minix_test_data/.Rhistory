as.POSIXct.POSIXlt(all_dat$Time[1])
View(dat_3.3)
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
cumsum(dat_3.4$Time)
cs <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
cs
length(dat_3.4)
length(dat_3.4$Time)
dat_3.4$Time
cs <- unlist(by(dat_3.4$Time, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
cs
class(cs)
View(cs)
cs[1]
unlist(cs)
cs <- NULL
cs$ttf <- unlist(by(dat_3.4, dat_3.4$Time, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Time, function(x) difftime(x$Time, x$Time[1], units= "secs")))
View(dat_3.4)
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF[1]
class(dat_3.4$TTF[1])
dat_3.4$TTF[1] + dat_3.4$TTF[2]
dat_3.4$TTF[1] + dat_3.4$TTF[2] + dat_3.4$TTF[3]
cumsum(dat_3.4$TTF[1] + dat_3.4$TTF[2] + dat_3.4$TTF[3])
cumsum(dat_3.4$TTF[1], dat_3.4$TTF[2], dat_3.4$TTF[3])
cumsum(c(dat_3.4$TTF[1], dat_3.4$TTF[2], dat_3.4$TTF[3]))
dat_3.4$Time[1] <- dat_3.3$Time[length(dat_3.3$Time)]
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.2$Inter_Failure_Time <- make.interFailures(dat_3.2$TTF)
dat_3.3$Inter_Failure_Time <- make.interFailures(dat_3.3$TTF)
dat_3.4$Inter_Failure_Time <- make.interFailures(dat_3.4$TTF)
cumsum(dat_3.4$Time)
cumsum(dat_3.4$Inter_Failure_Time)
cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$Inter_Failure_Time))
dat_3.3$TTF <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$Inter_Failure_Time))
dat_3.3$TTF <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$Inter_Failure_Time[-1,]))
dat_3.3 <- dat_3.3[-1, ]
dat_3.4 <- dat_3.4[-1, ]
dat_3.3$TTF <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$Inter_Failure_Time))
cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$Inter_Failure_Time))
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$Inter_Failure_Time))
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.2$Inter_Failure_Time <- make.interFailures(dat_3.2$TTF)
dat_3.3$Inter_Failure_Time <- make.interFailures(dat_3.3$TTF)
dat_3.4$Inter_Failure_Time <- make.interFailures(dat_3.4$TTF)
# Calculate running sum of whole test time
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$Inter_Failure_Time))
temp[-1]
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$Inter_Failure_Time))
temp_1
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$Inter_Failure_Time))
temp_1
temp
dat_3.3$TTF <- temp[-1]
dat_3.4$TTF <- temp_1[-1]
dat_3.3 <- dat_3.3[-1, ]
dat_3.4 <- dat_3.4[-1, ]
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
View(all_dat)
Full.Surv <- survfit(Surv(all_dat) ~ Version, data = AllData)
Full.Surv <- survfit(Surv(TTF) ~ Version, data = all_dat)
Full.Surv <- survfit(Surv(TTF) ~ 1, data = all_dat)
Full.gg <- ggsurvplot(Full.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
Full.km <- Full.gg$plot
Full.km
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
# Getting the data
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
#Taking unique Service names only
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
dat_3.3 <- dat_3.3[row.names(unique(dat_3.3[,c('Version', 'Name')])),]
dat_3.4 <- dat_3.4[row.names(unique(dat_3.4[,c('Version', 'Name')])),]
# cumulative time-to-fail
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
# create interfailure times
dat_3.2$Inter_Failure_Time <- make.interFailures(dat_3.2$TTF)
dat_3.3$Inter_Failure_Time <- make.interFailures(dat_3.3$TTF)
dat_3.4$Inter_Failure_Time <- make.interFailures(dat_3.4$TTF)
# Calculate running sums of whole test time
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$Inter_Failure_Time))
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$Inter_Failure_Time))
dat_3.3$TTF <- temp[-1]
dat_3.4$TTF <- temp_1[-1]
# Get Rid of censor point I created as start time.
dat_3.3 <- dat_3.3[-1, ]
dat_3.4 <- dat_3.4[-1, ]
# Merge the data set
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
Full.Surv <- survfit(Surv(TTF) ~ 1, data = all_dat)
Full.gg <- ggsurvplot(Full.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
Full.km <- Full.gg$plot
Full.km
# Getting the data
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
#Taking unique Service names only
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
dat_3.3 <- dat_3.3[row.names(unique(dat_3.3[,c('Version', 'Name')])),]
dat_3.4 <- dat_3.4[row.names(unique(dat_3.4[,c('Version', 'Name')])),]
# incase of misunderstanding...
drops <- c("Yanran")
dat_3.2 <- dat_3.2[!(dat_3.2$Student %in% drops), ]
dat_3.3 <- dat_3.3[!(dat_3.3$Student %in% drops), ]
dat_3.4 <- dat_3.4[!(dat_3.4$Student %in% drops), ]
# cumulative time-to-fail
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
# create interfailure times
dat_3.2$Inter_Failure_Time <- make.interFailures(dat_3.2$TTF)
dat_3.3$Inter_Failure_Time <- make.interFailures(dat_3.3$TTF)
dat_3.4$Inter_Failure_Time <- make.interFailures(dat_3.4$TTF)
# Calculate running sums of whole test time
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$Inter_Failure_Time))
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$Inter_Failure_Time))
dat_3.3$TTF <- temp[-1]
dat_3.4$TTF <- temp_1[-1]
# Get Rid of censor point I created as start time.
dat_3.3 <- dat_3.3[-1, ]
dat_3.4 <- dat_3.4[-1, ]
# Merge the data set
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
Full.Surv <- survfit(Surv(TTF) ~ 1, data = all_dat)
Full.gg <- ggsurvplot(Full.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
Full.km <- Full.gg$plot
Full.km
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
#Taking unique Service names only
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
dat_3.3 <- dat_3.3[row.names(unique(dat_3.3[,c('Version', 'Name')])),]
dat_3.4 <- dat_3.4[row.names(unique(dat_3.4[,c('Version', 'Name')])),]
# # incase of misunderstanding...
# drops <- c("Yanran")
# dat_3.2 <- dat_3.2[!(dat_3.2$Student %in% drops), ]
# dat_3.3 <- dat_3.3[!(dat_3.3$Student %in% drops), ]
# dat_3.4 <- dat_3.4[!(dat_3.4$Student %in% drops), ]
# cumulative time-to-fail
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
# create times between failures
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
dat_3.3$TBFs <- make.interFailures(dat_3.3$TTF)
dat_3.4$TBFs <- make.interFailures(dat_3.4$TTF)
#Calculate MTBF (custom functions)
dat_3.2$MTBF <- make.MTBF(dat_3.2$TBFs)
dat_3.3$MTBF <- make.MTBF(dat_3.3$TBFs)
dat_3.4$MTBF <- make.MTBF(dat_3.4$TBFs)
dat_3.2_MTBFs <- ggplot(data=dat_3.2, aes(TTF, MTBF))+ggtitle("MINIX v3.2 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.3_MTBFs <- ggplot(data=dat_3.3, aes(TTF, MTBF))+ggtitle("MINIX v3.3 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.4_MTBFs <- ggplot(data=dat_3.4, aes(TTF, MTBF))+ggtitle("MINIX v3.4 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
# Calculate running sums of whole test time
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$Inter_Failure_Time))
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$Inter_Failure_Time))
dat_3.3$TTF <- temp[-1]
dat_3.4$TTF <- temp_1[-1]
# Get Rid of censor point I created as start time.
dat_3.3 <- dat_3.3[-1, ]
dat_3.4 <- dat_3.4[-1, ]
# Merge the data set
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
# Make MTBFs for whole data set
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
all_dat$MTBF <- make.MTBF(all_dat$TBFs)
all_dat_MTBFs <- ggplot(data=all_dat, aes(TTF, MTBF))+ggtitle("MINIX v3.2 - 3.3 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
# Make the CDF plot
all_dat.Surv <- survfit(Surv(TTF) ~ 1, data = all_dat)
all_dat.gg <- ggsurvplot(all_dat.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
all_dat.km <- Full.gg$plot
dat_3.2_MTBFs
make.MTBF <- function(times_to_fail){
times_to_fail <- cumsum(as.numeric(times_to_fail))
for(i in seq(times_to_fail)){
times_to_fail[i] <- times_to_fail[i] / i
}
return(times_to_fail)
}
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
#Taking unique Service names only
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
dat_3.3 <- dat_3.3[row.names(unique(dat_3.3[,c('Version', 'Name')])),]
dat_3.4 <- dat_3.4[row.names(unique(dat_3.4[,c('Version', 'Name')])),]
# # incase of misunderstanding...
# drops <- c("Yanran")
# dat_3.2 <- dat_3.2[!(dat_3.2$Student %in% drops), ]
# dat_3.3 <- dat_3.3[!(dat_3.3$Student %in% drops), ]
# dat_3.4 <- dat_3.4[!(dat_3.4$Student %in% drops), ]
# cumulative time-to-fail
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
# create times between failures
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
dat_3.3$TBFs <- make.interFailures(dat_3.3$TTF)
dat_3.4$TBFs <- make.interFailures(dat_3.4$TTF)
#Calculate MTBF (custom functions)
dat_3.2$MTBF <- make.MTBF(dat_3.2$TBFs)
dat_3.3$MTBF <- make.MTBF(dat_3.3$TBFs)
dat_3.4$MTBF <- make.MTBF(dat_3.4$TBFs)
dat_3.2_MTBFs <- ggplot(data=dat_3.2, aes(TTF, MTBF))+ggtitle("MINIX v3.2 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.3_MTBFs <- ggplot(data=dat_3.3, aes(TTF, MTBF))+ggtitle("MINIX v3.3 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.4_MTBFs <- ggplot(data=dat_3.4, aes(TTF, MTBF))+ggtitle("MINIX v3.4 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
# Calculate running sums of whole test time
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$Inter_Failure_Time))
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$Inter_Failure_Time))
dat_3.3$TTF <- temp[-1]
dat_3.4$TTF <- temp_1[-1]
# Get Rid of censor point I created as start time.
dat_3.3 <- dat_3.3[-1, ]
dat_3.4 <- dat_3.4[-1, ]
# Merge the data set
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
# Make MTBFs for whole data set
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
all_dat$MTBF <- make.MTBF(all_dat$TBFs)
all_dat_MTBFs <- ggplot(data=all_dat, aes(TTF, MTBF))+ggtitle("MINIX v3.2 - 3.3 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
# Make the CDF plot
all_dat.Surv <- survfit(Surv(TTF) ~ 1, data = all_dat)
all_dat.gg <- ggsurvplot(all_dat.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
all_dat.km <- Full.gg$plot
dat_3.2$TTF
temp
dat_3.2_MTBFs
dat_3.3_MTBFs
dat_3.4_MTBFs
dat_3.2$TTF[length(dat_3.2$TTF)]
#=============== Using Test Data ============================================================================
# Getting the data
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
#Taking unique Service names only
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
dat_3.3 <- dat_3.3[row.names(unique(dat_3.3[,c('Version', 'Name')])),]
dat_3.4 <- dat_3.4[row.names(unique(dat_3.4[,c('Version', 'Name')])),]
# # incase of misunderstanding...
# drops <- c("Yanran")
# dat_3.2 <- dat_3.2[!(dat_3.2$Student %in% drops), ]
# dat_3.3 <- dat_3.3[!(dat_3.3$Student %in% drops), ]
# dat_3.4 <- dat_3.4[!(dat_3.4$Student %in% drops), ]
# cumulative time-to-fail
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
# create times between failures
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
dat_3.3$TBFs <- make.interFailures(dat_3.3$TTF)
dat_3.4$TBFs <- make.interFailures(dat_3.4$TTF)
#Calculate MTBF (custom functions)
dat_3.2$MTBF <- make.MTBF(dat_3.2$TBFs)
dat_3.3$MTBF <- make.MTBF(dat_3.3$TBFs)
dat_3.4$MTBF <- make.MTBF(dat_3.4$TBFs)
dat_3.2_MTBFs <- ggplot(data=dat_3.2, aes(TTF, MTBF))+ggtitle("MINIX v3.2 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.3_MTBFs <- ggplot(data=dat_3.3, aes(TTF, MTBF))+ggtitle("MINIX v3.3 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.4_MTBFs <- ggplot(data=dat_3.4, aes(TTF, MTBF))+ggtitle("MINIX v3.4 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
# Calculate running sums of whole test time
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$TBFs))
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$TBFs))
dat_3.3$TTF <- temp[-1]
dat_3.4$TTF <- temp_1[-1]
# Get Rid of censor point I created as start time.
dat_3.3 <- dat_3.3[-1, ]
dat_3.4 <- dat_3.4[-1, ]
# Merge the data set
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
# Make MTBFs for whole data set
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
all_dat$MTBF <- make.MTBF(all_dat$TBFs)
all_dat_MTBFs <- ggplot(data=all_dat, aes(TTF, MTBF))+ggtitle("MINIX v3.2 - 3.3 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
# Make the CDF plot
all_dat.Surv <- survfit(Surv(TTF) ~ 1, data = all_dat)
all_dat.gg <- ggsurvplot(all_dat.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
all_dat.km <- Full.gg$plot
all_dat_MTBFs
#=============== Using Test Data ============================================================================
# Getting the data
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
#Taking unique Service names only
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
dat_3.3 <- dat_3.3[row.names(unique(dat_3.3[,c('Version', 'Name')])),]
dat_3.4 <- dat_3.4[row.names(unique(dat_3.4[,c('Version', 'Name')])),]
# # incase of misunderstanding...
# drops <- c("Yanran")
# dat_3.2 <- dat_3.2[!(dat_3.2$Student %in% drops), ]
# dat_3.3 <- dat_3.3[!(dat_3.3$Student %in% drops), ]
# dat_3.4 <- dat_3.4[!(dat_3.4$Student %in% drops), ]
# cumulative time-to-fail
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
# create times between failures
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
dat_3.3$TBFs <- make.interFailures(dat_3.3$TTF)
dat_3.4$TBFs <- make.interFailures(dat_3.4$TTF)
#Calculate MTBF (custom functions)
dat_3.2$MTBF <- make.MTBF(dat_3.2$TBFs)
dat_3.3$MTBF <- make.MTBF(dat_3.3$TBFs)
dat_3.4$MTBF <- make.MTBF(dat_3.4$TBFs)
dat_3.2_MTBFs <- ggplot(data=dat_3.2, aes(TTF, MTBF))+ggtitle("MINIX v3.2 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.3_MTBFs <- ggplot(data=dat_3.3, aes(TTF, MTBF))+ggtitle("MINIX v3.3 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.4_MTBFs <- ggplot(data=dat_3.4, aes(TTF, MTBF))+ggtitle("MINIX v3.4 Cumulative MTBF")+ labs(x ="System Age (hrs)", y = "MTBF (hrs)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
# Calculate running sums of whole test time
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$TBFs))
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$TBFs))
dat_3.3$TTF <- temp[-1]
dat_3.4$TTF <- temp_1[-1]
# Get Rid of censor point I created as start time.
dat_3.3 <- dat_3.3[-1, ]
dat_3.4 <- dat_3.4[-1, ]
# Merge the data set
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
# Make MTBFs for whole data set
all_dat$TBFs <- make.interFailures(all_dat$TTF)
all_dat$MTBF <- make.MTBF(all_dat$TBFs)
all_dat_MTBFs <- ggplot(data=all_dat, aes(TTF, MTBF))+ggtitle("MINIX v3.2 - 3.4 Cumulative MTBF")+ labs(x ="System Age (sec)", y = "MTBF (sec)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
# Make the CDF plot
all_dat.Surv <- survfit(Surv(TTF) ~ 1, data = all_dat)
all_dat.gg <- ggsurvplot(all_dat.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
all_dat.km <- Full.gg$plot
all_dat_MTBFs
dat_3.2_MTBFs
dat_3.3_MTBFs
dat_3.4_MTBFs
60*60
6*60*60
21600/36
y <- findInterval(all_dat$TTF, seq(0, 21600, by=600))
y
length(all_dat$TTF)
class(y)
plot(y)
plot(unique(y))
plot(y, unique(y))
all_dat$cuts <- findInterval(all_dat$TTF, seq(0, 21600, by=600))
plot(unique(all_dat$cuts, all_dat$TTF))
y
hist(all_dat$cuts)
hist(all_dat$cuts, breaks = 12)
hist(all_dat$TTF, breaks = 12)
hist(all_dat$TTF, breaks = 10)
hist(all_dat$TTF, breaks = 15)
120*2
120*60
breaks <- seq(0, 21600, by=600)
breaks
labels <- seq(1:length(breaks))
labels
# set up boundaries for intervals/bins
breaks <- seq(0, 21600, by=600)
# specify interval/bin labels
labels <- seq(1:length(breaks))
# bucketing data points into bins
bins <- cut(all_dat$TTF, breaks, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
summary(bins)
length(breaks)
length(labels)
breaks <- seq(0, 21600, by=600)
# specify interval/bin labels
labels <- seq(1:length(breaks))
bins <- cut(all_dat$TTF, breaks, include.lowest = T, right=FALSE, labels=labels)
labels <- seq(1:length(breaks) - 1)
labels
length(labels)
labels <- seq(1:(length(breaks) - 1))
length(labels)
labels
bins <- cut(all_dat$TTF, breaks, include.lowest = T, right=FALSE, labels=labels)
summary(bins)
plot(bins, main="Frequency", ylab="Number of Houses",col="bisque")
all_dat$bins <- bins
all_dat$cuts <- NULL
ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
stat_count(geom="text", aes(label=..count..), hjust=-0.1) +
labs(y="# of Crashes",x="Hypothetical Month")
ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
stat_count(geom="text", hjust=-0.1) +
labs(y="# of Crashes",x="Hypothetical Month")
ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
labs(y="# of Crashes",x="Hypothetical Month")
breaks <- seq(0, 21600, by=600)
# specify interval/bin labels
labels <- c('v3.2', seq(2:12), 'v3.3', seq(14:24), 'v3.4', seq(26:length(all_dat)))
# bucketing data points into bins
bins <- cut(all_dat$TTF, breaks, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
#summary(bins)
all_dat$bins <- bins
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
labs(y="# of Crashes",x="Hypothetical Month")
breaks <- seq(0, 21600, by=600)
# specify interval/bin labels
labels <- c('v3.2', seq(2:12), 'v3.3', seq(14:24), 'v3.4', seq(26:(length(all_dat) - 1)))
# bucketing data points into bins
bins <- cut(all_dat$TTF, breaks, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
#summary(bins)
all_dat$bins <- bins
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
labs(y="# of Crashes",x="Hypothetical Month")
labels <- c('v3.2', seq(2:12), 'v3.3', seq(14:24), 'v3.4', seq(26:(length(all_dat) - 1)))
labels
seq(2:12)
labels <- c('v3.2', seq(from = 2, to = 12), 'v3.3', seq(from = 14, to = 24), 'v3.4', seq(from = 26, to = (length(all_dat) - 1)))
seq(2:12)
labels
labels <- c('v3.2', seq(from = 2, to = 12), 'v3.3', seq(from = 14, to = 24), 'v3.4', seq(from = 26, to = 36))
labels
breaks <- seq(0, 21600, by=600)
# specify interval/bin labels
labels <- c('v3.2', seq(from = 2, to = 12), 'v3.3', seq(from = 14, to = 24), 'v3.4', seq(from = 26, to = 36))
# bucketing data points into bins
bins <- cut(all_dat$TTF, breaks, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
#summary(bins)
all_dat$bins <- bins
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
labs(y="# of Crashes",x="Hypothetical Month")
freqPlot
all_dat$bins <- bins
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
labs(y="# of Crashes",x="Hypothetical Month")+
scale_x_discrete(drop=FALSE)
freqPlot
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
labs(y="# OF FAILURES",x="HYPOTHETICAL MONTH")+
scale_x_discrete(drop=FALSE)+ theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
freqPlot
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
labs(y="# OF FAILURES",x="HYPOTHETICAL MONTH")+
scale_x_discrete(drop=FALSE)+ theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + theme(plot.title = element_text(size = 24))
freqPlot
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
labs(y="# OF FAILURES",x="HYPOTHETICAL MONTH")+
scale_x_discrete(drop=FALSE)+ theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(plot.title = element_text(size = 24))
freqPlot
breaks <- seq(0, 21600, by=600)
# specify interval/bin labels
labels <- c('1 (v3.2)', seq(from = 2, to = 12), '13 (v3.3)', seq(from = 14, to = 24), '25 (v3.4)', seq(from = 26, to = 36))
# bucketing data points into bins
bins <- cut(all_dat$TTF, breaks, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
#summary(bins)
all_dat$bins <- bins
# Plot frequency to see if we have simulated the next release effect
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) +
labs(y="# OF FAILURES",x="HYPOTHETICAL MONTH")+
scale_x_discrete(drop=FALSE)+ theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(plot.title = element_text(size = 24))
freqPlot
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) + +ggtitle("NEXT RELEASE EFFECT EXHIBITED DURING TEST")
labs(y="# OF FAILURES",x="HYPOTHETICAL MONTH")+
scale_x_discrete(drop=FALSE)+ theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(plot.title = element_text(size = 24))
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) + +ggtitle("NEXT RELEASE EFFECT OBSERVED DURING TEST")+
labs(y="# OF FAILURES",x="HYPOTHETICAL MONTH")+
scale_x_discrete(drop=FALSE)+ theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(plot.title = element_text(size = 24))
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) + ggtitle("NEXT RELEASE EFFECT OBSERVED DURING TEST")+
labs(y="# OF FAILURES",x="HYPOTHETICAL MONTH")+
scale_x_discrete(drop=FALSE)+ theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(plot.title = element_text(size = 24))
freqPlot
