gitData.km <- gitData.gg$plot
# Put plots together for presentation
R_and_MTBFs <- ggarrange(githubMTBFs, ind_test_Reliability.km, ncol = 1, nrow = 2)
R_and_MTBFs
R_and_MTBFs <- ggarrange(githubMTBFs, gitData.km, ncol = 1, nrow = 2)
R_and_MTBFs
breaks <- seq(0, 21600, by=600)
# specify interval/bin labels
labels <- c('1 (v3.2)', seq(from = 2, to = 12), '13 (v3.3)', seq(from = 14, to = 24), '25 (v3.4)', seq(from = 26, to = 36))
# bucketing data points into bins
bins <- cut(all_dat$TTF, breaks, include.lowest = T, right=FALSE, labels=labels)
# inspect bins
#summary(bins)
all_dat$bins <- bins
# Plot frequency to see if we have simulated the next release effect
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) + ggtitle("NEXT RELEASE EFFECT OBSERVED DURING TEST")+
labs(y="Failure Density\n(# Unique Failures Observed)",x="HYPOTHETICAL MONTHLY")+
scale_x_discrete(drop=FALSE)+ theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(plot.title = element_text(size = 24))
freqPlot
View(confirmedBugs)
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, ..count..)) + geom_histogram() + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
)
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, ..count..)) + geom_histogram() + scale_x_datetime(breaks = date_break("1 months"),
labels = date_format("%Y-%b")
)
library("scales")
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, ..count..)) + geom_histogram() + scale_x_datetime(breaks = date_break("1 months"),
labels = date_format("%Y-%b")
)
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, ..count..)) + geom_histogram() + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
)
github_freq
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, ..count..)) + geom_histogram(binwidth = 20) + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
)
github_freq
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, ..count..)) + geom_histogram(binwidth = 30) + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
)
github_freq
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, ..count..)) + + geom_bar(color='black', alpha=0.9) + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
) + ggtitle("GitHub Data Frequency")+
labs(y="Failure Density\n(# Failures Observed)",x="MONTHS")+
theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(plot.title = element_text(size = 24))
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, ..count..)) + geom_bar(color='black', alpha=0.9) + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
) + ggtitle("GitHub Data Frequency")+
labs(y="Failure Density\n(# Failures Observed)",x="MONTHS")+
theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(plot.title = element_text(size = 24))
github_freq
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, ..count..)) +geom_histogram() + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
) + ggtitle("GitHub Data Frequency")+
labs(y="Failure Density\n(# Failures Observed)",x="MONTHS")+
theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(plot.title = element_text(size = 24))
github_freq
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, ..count..)) +geom_histogram(color='black', alpha=0.9) + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
) + ggtitle("GitHub Data Frequency")+
labs(y="Failure Density\n(# Failures Observed)",x="MONTHS") +
theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(size = 24))
github_freq
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, fill=..count..)) +geom_histogram(color='black', alpha=0.9) + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
) + ggtitle("GitHub Data Frequency")+
labs(y="Failure Density\n(# Failures Observed)",x="MONTHS") +
theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(size = 24))
github_freq
freqPlot <- ggplot(data=all_dat, aes(x=all_dat$bins,fill=..count..)) +
geom_bar(color='black', alpha=0.9) + ggtitle("NEXT RELEASE EFFECT OBSERVED DURING TEST")+
labs(y="FAILURE DENSITY\n(# Unique Failures Observed)",x="HYPOTHETICAL MONTHLY")+
scale_x_discrete(drop=FALSE)+ theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(plot.title = element_text(size = 24))
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, fill=..count..)) +geom_histogram(color='black', alpha=0.9) + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
) + ggtitle("GitHub DATA FREQUENCY")+
labs(y="FAILURE DENSITY\n(# Failures Observed)",x="MONTHS") +
theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(size = 24))
freqPlot
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, fill=..count..)) +geom_histogram(color='black', alpha=0.9) + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
) + ggtitle("GitHub DATA (NEXT RELEASE EFFECT?")+
labs(y="FAILURE DENSITY\n(# Failures Observed)",x="MONTHS") +
theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(size = 24))
github_freq
github_freq <- ggplot(confirmedBugs, aes(Opened_Date, fill=..count..)) +geom_histogram(color='black', alpha=0.9) + scale_x_datetime(breaks = date_breaks("1 months"),
labels = date_format("%Y-%b")
) + ggtitle("GitHub DATA (NEXT RELEASE EFFECT?)")+
labs(y="FAILURE DENSITY\n(# Failures Observed)",x="MONTHS") +
theme(axis.title = element_text(size=22), axis.text=element_text(size=16), axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(size = 24))
github_freq
View(dat_3.2)
write.xlsx(dat_3.2, "test_3.2/unique_test_3.2.xlsx", sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE)
library(xlsx)
write.xlsx(dat_3.2, "test_3.2/unique_test_3.2.xlsx", sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE)
write.xlsx(dat_3.3, "test_3.3/unique_test_3.3.xlsx", sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE)
write.xlsx(dat_3.4, "test_3.4/unique_test_3.4.xlsx", sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE)
library(xlsx)
library(ggplot2)
library(ggpubr)
library(survMisc)
library(survival)
library(survminer)
library(data.table)
library(grid)
library(gridExtra)
library(XML)
library(RCurl)
library(taRifx)
library(stringr)
library("scales")
library ("MASS")
source("misc.R")
# Getting the data
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
#Taking unique failures only
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
dat_3.3 <- dat_3.3[row.names(unique(dat_3.3[,c('Version', 'Name')])),]
dat_3.4 <- dat_3.4[row.names(unique(dat_3.4[,c('Version', 'Name')])),]
# # incase of misunderstanding...
# drops <- c("Yanran")
# dat_3.2 <- dat_3.2[!(dat_3.2$Student %in% drops), ]
# dat_3.3 <- dat_3.3[!(dat_3.3$Student %in% drops), ]
# dat_3.4 <- dat_3.4[!(dat_3.4$Student %in% drops), ]
# cumulative time-to-fail
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
# create times between failures
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
dat_3.3$TBFs <- make.interFailures(dat_3.3$TTF)
dat_3.4$TBFs <- make.interFailures(dat_3.4$TTF)
#Calculate MTBF (custom functions)
dat_3.2$MTBF <- make.MTBF(dat_3.2$TBFs)
dat_3.3$MTBF <- make.MTBF(dat_3.3$TBFs)
dat_3.4$MTBF <- make.MTBF(dat_3.4$TBFs)
# Merge the data set (this is for facet plots, and is replaced with a new merge later)
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
Large.Surv <- survfit(Surv(TTF) ~ Version, data = all_dat)
Large.gg <- ggsurvplot(Large.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none", xlab = "SYSTEM AGE (s)", ylab = "CDF", font.y = c(23, "black"), font.x = c(23, "black"), font.xtickslab = c(14, "plain", "black"), font.ytickslab = c(14, "plain", "black"))
ind_test_cdf.km <- Large.gg$plot + facet_wrap(~Version)
Large.Surv <- survfit(Surv(TTF) ~ Version, data = all_dat)
Large.gg <- ggsurvplot(Large.Surv, conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none", xlab = "SYSTEM AGE (s)", ylab = "RELIABILITY", font.y = c(23, "black"), font.x = c(23, "black"), font.xtickslab = c(14, "plain", "black"), font.ytickslab = c(14, "plain", "black"))
ind_test_Reliability.km <- Large.gg$plot + facet_wrap(~Version)
# MTBF plots
dat_3.2_MTBFs <- ggplot(data=dat_3.2, aes(TTF, MTBF))+ggtitle("v3.2")+ labs(x ="", y = "CUMULATIVE MTBF (s)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.3_MTBFs <- ggplot(data=dat_3.3, aes(TTF, MTBF))+ggtitle("v3.3")+ labs(x ="SYSTEM AGE (s)", y = "") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.4_MTBFs <- ggplot(data=dat_3.4, aes(TTF, MTBF))+ggtitle("v3.4")+ labs(x ="", y = "") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
all_MTBFs <- ggarrange(dat_3.2_MTBFs, dat_3.3_MTBFs, dat_3.4_MTBFs, ncol = 3, nrow = 1)
cdf_and_MTBFs <- ggarrange(all_MTBFs, ind_test_cdf.km, ncol = 1, nrow = 2)
R_and_MTBFs <- ggarrange(all_MTBFs, ind_test_Reliability.km, ncol = 1, nrow = 2)
# # CDF plots for individual tests
# dat_3.2.Surv <- survfit(Surv(TTF) ~ 1, data = dat_3.2)
# dat_3.2.gg <- ggsurvplot(dat_3.2.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
# dat_3.2.km <- dat_3.2.gg$plot
#
# # RELIABILITY plot for individual tests
# R_3.2.Surv <- survfit(Surv(TTF) ~ 1, data = dat_3.2)
# R_3.2.gg <- ggsurvplot(R_3.2.Surv, conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
# R_3.2.km <- R_3.2.gg$plot
# Calculate running sums of whole test time
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$TBFs))
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$TBFs))
dat_3.3$TTF <- temp[-1]
dat_3.4$TTF <- temp_1[-1]
View(dat_3.3)
# Getting the data
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
#Taking unique failures only
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
dat_3.3 <- dat_3.3[row.names(unique(dat_3.3[,c('Version', 'Name')])),]
dat_3.4 <- dat_3.4[row.names(unique(dat_3.4[,c('Version', 'Name')])),]
# # incase of misunderstanding...
# drops <- c("Yanran")
# dat_3.2 <- dat_3.2[!(dat_3.2$Student %in% drops), ]
# dat_3.3 <- dat_3.3[!(dat_3.3$Student %in% drops), ]
# dat_3.4 <- dat_3.4[!(dat_3.4$Student %in% drops), ]
# cumulative time-to-fail
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
# create times between failures
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
dat_3.3$TBFs <- make.interFailures(dat_3.3$TTF)
dat_3.4$TBFs <- make.interFailures(dat_3.4$TTF)
#Calculate MTBF (custom functions)
dat_3.2$MTBF <- make.MTBF(dat_3.2$TBFs)
dat_3.3$MTBF <- make.MTBF(dat_3.3$TBFs)
dat_3.4$MTBF <- make.MTBF(dat_3.4$TBFs)
# Merge the data set (this is for facet plots, and is replaced with a new merge later)
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
Large.Surv <- survfit(Surv(TTF) ~ Version, data = all_dat)
Large.gg <- ggsurvplot(Large.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none", xlab = "SYSTEM AGE (s)", ylab = "CDF", font.y = c(23, "black"), font.x = c(23, "black"), font.xtickslab = c(14, "plain", "black"), font.ytickslab = c(14, "plain", "black"))
ind_test_cdf.km <- Large.gg$plot + facet_wrap(~Version)
Large.Surv <- survfit(Surv(TTF) ~ Version, data = all_dat)
Large.gg <- ggsurvplot(Large.Surv, conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none", xlab = "SYSTEM AGE (s)", ylab = "RELIABILITY", font.y = c(23, "black"), font.x = c(23, "black"), font.xtickslab = c(14, "plain", "black"), font.ytickslab = c(14, "plain", "black"))
ind_test_Reliability.km <- Large.gg$plot + facet_wrap(~Version)
# MTBF plots
dat_3.2_MTBFs <- ggplot(data=dat_3.2, aes(TTF, MTBF))+ggtitle("v3.2")+ labs(x ="", y = "CUMULATIVE MTBF (s)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.3_MTBFs <- ggplot(data=dat_3.3, aes(TTF, MTBF))+ggtitle("v3.3")+ labs(x ="SYSTEM AGE (s)", y = "") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.4_MTBFs <- ggplot(data=dat_3.4, aes(TTF, MTBF))+ggtitle("v3.4")+ labs(x ="", y = "") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
all_MTBFs <- ggarrange(dat_3.2_MTBFs, dat_3.3_MTBFs, dat_3.4_MTBFs, ncol = 3, nrow = 1)
cdf_and_MTBFs <- ggarrange(all_MTBFs, ind_test_cdf.km, ncol = 1, nrow = 2)
R_and_MTBFs <- ggarrange(all_MTBFs, ind_test_Reliability.km, ncol = 1, nrow = 2)
# # CDF plots for individual tests
# dat_3.2.Surv <- survfit(Surv(TTF) ~ 1, data = dat_3.2)
# dat_3.2.gg <- ggsurvplot(dat_3.2.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
# dat_3.2.km <- dat_3.2.gg$plot
#
# # RELIABILITY plot for individual tests
# R_3.2.Surv <- survfit(Surv(TTF) ~ 1, data = dat_3.2)
# R_3.2.gg <- ggsurvplot(R_3.2.Surv, conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
# R_3.2.km <- R_3.2.gg$plot
# Calculate running sums of whole test time
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$TBFs))
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$TBFs))
View(dat_3.4)
# Getting the data
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
#Taking unique failures only
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
dat_3.3 <- dat_3.3[row.names(unique(dat_3.3[,c('Version', 'Name')])),]
dat_3.4 <- dat_3.4[row.names(unique(dat_3.4[,c('Version', 'Name')])),]
# # incase of misunderstanding...
# drops <- c("Yanran")
# dat_3.2 <- dat_3.2[!(dat_3.2$Student %in% drops), ]
# dat_3.3 <- dat_3.3[!(dat_3.3$Student %in% drops), ]
# dat_3.4 <- dat_3.4[!(dat_3.4$Student %in% drops), ]
# cumulative time-to-fail
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
# create times between failures
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
dat_3.3$TBFs <- make.interFailures(dat_3.3$TTF)
dat_3.4$TBFs <- make.interFailures(dat_3.4$TTF)
#Calculate MTBF (custom functions)
dat_3.2$MTBF <- make.MTBF(dat_3.2$TBFs)
dat_3.3$MTBF <- make.MTBF(dat_3.3$TBFs)
dat_3.4$MTBF <- make.MTBF(dat_3.4$TBFs)
# Merge the data set (this is for facet plots, and is replaced with a new merge later)
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
Large.Surv <- survfit(Surv(TTF) ~ Version, data = all_dat)
Large.gg <- ggsurvplot(Large.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none", xlab = "SYSTEM AGE (s)", ylab = "CDF", font.y = c(23, "black"), font.x = c(23, "black"), font.xtickslab = c(14, "plain", "black"), font.ytickslab = c(14, "plain", "black"))
ind_test_cdf.km <- Large.gg$plot + facet_wrap(~Version)
Large.Surv <- survfit(Surv(TTF) ~ Version, data = all_dat)
Large.gg <- ggsurvplot(Large.Surv, conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none", xlab = "SYSTEM AGE (s)", ylab = "RELIABILITY", font.y = c(23, "black"), font.x = c(23, "black"), font.xtickslab = c(14, "plain", "black"), font.ytickslab = c(14, "plain", "black"))
ind_test_Reliability.km <- Large.gg$plot + facet_wrap(~Version)
# MTBF plots
dat_3.2_MTBFs <- ggplot(data=dat_3.2, aes(TTF, MTBF))+ggtitle("v3.2")+ labs(x ="", y = "CUMULATIVE MTBF (s)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.3_MTBFs <- ggplot(data=dat_3.3, aes(TTF, MTBF))+ggtitle("v3.3")+ labs(x ="SYSTEM AGE (s)", y = "") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.4_MTBFs <- ggplot(data=dat_3.4, aes(TTF, MTBF))+ggtitle("v3.4")+ labs(x ="", y = "") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
all_MTBFs <- ggarrange(dat_3.2_MTBFs, dat_3.3_MTBFs, dat_3.4_MTBFs, ncol = 3, nrow = 1)
cdf_and_MTBFs <- ggarrange(all_MTBFs, ind_test_cdf.km, ncol = 1, nrow = 2)
R_and_MTBFs <- ggarrange(all_MTBFs, ind_test_Reliability.km, ncol = 1, nrow = 2)
# # CDF plots for individual tests
# dat_3.2.Surv <- survfit(Surv(TTF) ~ 1, data = dat_3.2)
# dat_3.2.gg <- ggsurvplot(dat_3.2.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
# dat_3.2.km <- dat_3.2.gg$plot
#
# # RELIABILITY plot for individual tests
# R_3.2.Surv <- survfit(Surv(TTF) ~ 1, data = dat_3.2)
# R_3.2.gg <- ggsurvplot(R_3.2.Surv, conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
# R_3.2.km <- R_3.2.gg$plot
# Calculate running sums of whole test time
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$TBFs))
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$TBFs))
dat_3.3$TTF <- temp[-1]
dat_3.4$TTF <- temp_1[-1]
# Getting the data
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
#Taking unique failures only
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
dat_3.3 <- dat_3.3[row.names(unique(dat_3.3[,c('Version', 'Name')])),]
dat_3.4 <- dat_3.4[row.names(unique(dat_3.4[,c('Version', 'Name')])),]
# # incase of misunderstanding...
# drops <- c("Yanran")
# dat_3.2 <- dat_3.2[!(dat_3.2$Student %in% drops), ]
# dat_3.3 <- dat_3.3[!(dat_3.3$Student %in% drops), ]
# dat_3.4 <- dat_3.4[!(dat_3.4$Student %in% drops), ]
# cumulative time-to-fail
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
# create times between failures
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
dat_3.3$TBFs <- make.interFailures(dat_3.3$TTF)
dat_3.4$TBFs <- make.interFailures(dat_3.4$TTF)
#Calculate MTBF (custom functions)
dat_3.2$MTBF <- make.MTBF(dat_3.2$TBFs)
dat_3.3$MTBF <- make.MTBF(dat_3.3$TBFs)
dat_3.4$MTBF <- make.MTBF(dat_3.4$TBFs)
# Merge the data set (this is for facet plots, and is replaced with a new merge later)
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
Large.Surv <- survfit(Surv(TTF) ~ Version, data = all_dat)
Large.gg <- ggsurvplot(Large.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none", xlab = "SYSTEM AGE (s)", ylab = "CDF", font.y = c(23, "black"), font.x = c(23, "black"), font.xtickslab = c(14, "plain", "black"), font.ytickslab = c(14, "plain", "black"))
ind_test_cdf.km <- Large.gg$plot + facet_wrap(~Version)
Large.Surv <- survfit(Surv(TTF) ~ Version, data = all_dat)
Large.gg <- ggsurvplot(Large.Surv, conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none", xlab = "SYSTEM AGE (s)", ylab = "RELIABILITY", font.y = c(23, "black"), font.x = c(23, "black"), font.xtickslab = c(14, "plain", "black"), font.ytickslab = c(14, "plain", "black"))
ind_test_Reliability.km <- Large.gg$plot + facet_wrap(~Version)
# MTBF plots
dat_3.2_MTBFs <- ggplot(data=dat_3.2, aes(TTF, MTBF))+ggtitle("v3.2")+ labs(x ="", y = "CUMULATIVE MTBF (s)") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.3_MTBFs <- ggplot(data=dat_3.3, aes(TTF, MTBF))+ggtitle("v3.3")+ labs(x ="SYSTEM AGE (s)", y = "") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
dat_3.4_MTBFs <- ggplot(data=dat_3.4, aes(TTF, MTBF))+ggtitle("v3.4")+ labs(x ="", y = "") + theme(axis.title = element_text(size=22), axis.text=element_text(size=16)) + geom_point()+geom_line()+ theme(plot.title = element_text(size = 24))
all_MTBFs <- ggarrange(dat_3.2_MTBFs, dat_3.3_MTBFs, dat_3.4_MTBFs, ncol = 3, nrow = 1)
cdf_and_MTBFs <- ggarrange(all_MTBFs, ind_test_cdf.km, ncol = 1, nrow = 2)
R_and_MTBFs <- ggarrange(all_MTBFs, ind_test_Reliability.km, ncol = 1, nrow = 2)
# # CDF plots for individual tests
# dat_3.2.Surv <- survfit(Surv(TTF) ~ 1, data = dat_3.2)
# dat_3.2.gg <- ggsurvplot(dat_3.2.Surv, fun = "event", conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
# dat_3.2.km <- dat_3.2.gg$plot
#
# # RELIABILITY plot for individual tests
# R_3.2.Surv <- survfit(Surv(TTF) ~ 1, data = dat_3.2)
# R_3.2.gg <- ggsurvplot(R_3.2.Surv, conf.int = TRUE, color = "strata", ggtheme = theme_bw(), legend = "none")
# R_3.2.km <- R_3.2.gg$plot
write.xlsx(dat_3.2, "test_3.2/unique_test_3.2.xlsx", sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE)
write.xlsx(dat_3.3, "test_3.3/unique_test_3.3.xlsx", sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE)
write.xlsx(dat_3.4, "test_3.4/unique_test_3.4.xlsx", sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE)
View(all_dat)
# Calculate running sums of whole test time
temp <- cumsum(c(dat_3.2$TTF[length(dat_3.2$TTF)], dat_3.3$TBFs))
temp_1 <- cumsum(c(temp[length(temp)], dat_3.4$TBFs))
dat_3.3$TTF <- temp[-1]
dat_3.4$TTF <- temp_1[-1]
# Get Rid of censor point I created as start time (= 0).
dat_3.3 <- dat_3.3[-1, ]
dat_3.4 <- dat_3.4[-1, ]
# Merge the data set
all_dat <- rbind(dat_3.2, dat_3.3, dat_3.4)
# Make TBFs for whole data set
all_dat$TBFs <- make.interFailures(all_dat$TTF)
# make MTBFs
all_dat$MTBF <- make.MTBF(all_dat$TBFs)
View(all_dat)
write.xlsx(all_dat, "all_test/unique_all_test.xlsx", sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE)
source("weibull.R")
get.weibull.analysis(dat_3.2$TTF, "TEST 3.2")
d <- as.data.frame(dat_3.2$TTF)
View(d)
get.weibull.analysis(d, "TEST 3.2")
d <- d[-1]
d <- as.data.frame(dat_3.2$TTF)
d <- d[,-1]
d <- as.data.frame(dat_3.2$TTF)
d <- d[-1,]
d <- as.data.frame(dat_3.2$TTF, names(TTF))
d <- as.data.frame(dat_3.2$TTF)
names(d)
d <- names("TTF")
d <- as.data.frame(dat_3.2$TTF)
d <- as.data.frame(TTF = dat_3.2$TTF)
d <- data.frame(TTF = dat_3.2$TTF)
d <- data.frame(TTF = dat_3.2$TTF[-1])
get.weibull.analysis(d, "MINIX TEST 3.2")
p <- get.weibull.analysis()
p <- get.weibull.analysis(d, "MINIX TEST 3.2")
plot(p)
p <- get.weibull.analysis(d, "MINIX TEST 3.2", line = TRUE, conf.lvl = .95)
plot(p)
p <- get.weibull.analysis(d, "MINIX TEST 3.2", line = TRUE)
plot(p)
p <- get.weibull.analysis(d, "MINIX TEST 3.2", line = 'lm', conf.lvl = .95)
plot(p)
p <- get.weibull.analysis(d, "MINIX TEST 3.2", line = 'lm', conf.lvl = .85)
plot(p)
p <- get.weibull.analysis(d, "MINIX TEST 3.2", line = 'lm', conf.lvl = .9999)
plot(p)
p <- get.weibull.analysis(d, "MINIX TEST 3.2", line = 'lm')
plot(p)
View(dat_3.3)
# Getting the data
dat_3.2 <- read.xlsx("test_3.2/test_3.2.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.3 <- read.xlsx("test_3.3/test_3.3.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
dat_3.4 <- read.xlsx("test_3.4/test_3.4.xlsx", 1, startRow = 1, colIndex = c(1, 2, 3, 4, 5, 6))
#Taking unique failures only
dat_3.2 <- dat_3.2[row.names(unique(dat_3.2[,c('Version', 'Name')])),]
dat_3.3 <- dat_3.3[row.names(unique(dat_3.3[,c('Version', 'Name')])),]
dat_3.4 <- dat_3.4[row.names(unique(dat_3.4[,c('Version', 'Name')])),]
# # incase of misunderstanding...
# drops <- c("Yanran")
# dat_3.2 <- dat_3.2[!(dat_3.2$Student %in% drops), ]
# dat_3.3 <- dat_3.3[!(dat_3.3$Student %in% drops), ]
# dat_3.4 <- dat_3.4[!(dat_3.4$Student %in% drops), ]
# cumulative time-to-fail
dat_3.2$TTF <- unlist(by(dat_3.2, dat_3.2$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.3$TTF <- unlist(by(dat_3.3, dat_3.3$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
dat_3.4$TTF <- unlist(by(dat_3.4, dat_3.4$Version, function(x) difftime(x$Time, x$Time[1], units= "secs")))
# create times between failures
dat_3.2$TBFs <- make.interFailures(dat_3.2$TTF)
dat_3.3$TBFs <- make.interFailures(dat_3.3$TTF)
dat_3.4$TBFs <- make.interFailures(dat_3.4$TTF)
#Calculate MTBF (custom functions)
dat_3.2$MTBF <- make.MTBF(dat_3.2$TBFs)
dat_3.3$MTBF <- make.MTBF(dat_3.3$TBFs)
dat_3.4$MTBF <- make.MTBF(dat_3.4$TBFs)
# create Data for weibull plots (cant use the zeros)
d1 <- data.frame(TTF = dat_3.2$TTF[-1])
d2 <- data.frame(TTF = dat_3.3$TTF[-1])
d3 <- data.frame(TTF = dat_3.4$TTF[-1])
# weibull plots (use plot(wp))
wp1 <- get.weibull.analysis(d1, "MINIX TEST 3.2", line = 'lm')
wp2 <- get.weibull.analysis(d2, "MINIX TEST 3.3", line = 'lm')
wp3 <- get.weibull.analysis(d3, "MINIX TEST 3.4", line = 'lm')
plot(wp1)
plot(wp2)
plot(wp3)
library(xlsx)
library(ggplot2)
library(ggpubr)
library(survMisc)
library(survival)
library(survminer)
library(data.table)
library(grid)
library(gridExtra)
library(XML)
library(RCurl)
library(taRifx)
library(stringr)
library("scales")
library ("MASS")
source("misc.R")
source("weibull.R")
View(dat_3.2)
View(dat_3.3)
x <- dat_3.2$TTF
x
px <- pweibull(x)
fitdistr(x, "weibull")
x <- data.frame(TTF = dat_3.2$TTF[-1])
fitdistr(x, "weibull")
x <- dat_3.2$TTF[-1]
x
fitdistr(x, "weibull")
fit_x <- fitdistr(x, "weibull")
fit_x
plot(x)
fit_x$estimate
fit_x$estimate[1]
fit_x$estimate[2]
px <- pweibull(x, fit_x$estimate[1], fit_x$estimate[2])
plot(x, px)
plot(x, 1:6000)
curve(px)
curve(pweibull(x, fit_x$estimate[1], fit_x$estimate[2]))
rx <- rweibull(x, fit_x$estimate[1], fit_x$estimate[2])
ggplot(dat_3.2, aes(TTF)) + stat_ecdf(geom = "step", pad = FALSE)
ggplot(dat_3.2, aes(TTF)) + stat_ecdf(geom = "step", pad = FALSE)+stat_function(fun = pweibull, color = "blue", args = list(fit_x$estimate[1], fit_x$estimate[2]))
view dat dat_3.3
view(dat_3.3)
View(dat_3.3)
# create Data for weibull plots (can't use the zero point with survreg or fitdistr)
d1 <- data.frame(TTF = dat_3.2$TTF[-1])
d2 <- data.frame(TTF = dat_3.3$TTF[-1])
d3 <- data.frame(TTF = dat_3.4$TTF[-1])
fit_d1 <- fitdistr(as.vector(d1), "weibull")
fit_d2 <- fitdistr(as.vector(d2), "weibull")
fit_d3 <- fitdistr(as.vector(d3), "weibull")
# weibull CDF
wcdf1 <- ggplot(d1, aes(TTF)) + stat_ecdf(geom = "step", pad = FALSE)+stat_function(fun = pweibull, color = "blue", args = list(fit_d1$estimate[1], fit_d1$estimate[2]))
wcdf2 <- ggplot(d2, aes(TTF)) + stat_ecdf(geom = "step", pad = FALSE)+stat_function(fun = pweibull, color = "red", args = list(fit_d2$estimate[1], fit_d2$estimate[2]))
wcdf3 <- ggplot(d3, aes(TTF)) + stat_ecdf(geom = "step", pad = FALSE)+stat_function(fun = pweibull, color = "yellow", args = list(fit_d3$estimate[1], fit_d3$estimate[2]))
as.vector(d1)
as.list(d1)
d1
vector(d1)
unlist(d1)
d1 <- data.frame(TTF = dat_3.2$TTF[-1])
d2 <- data.frame(TTF = dat_3.3$TTF[-1])
d3 <- data.frame(TTF = dat_3.4$TTF[-1])
fit_d1 <- fitdistr(as.list(d1), "weibull")
fit_d2 <- fitdistr(as.list(d2), "weibull")
fit_d3 <- fitdistr(as.list(d3), "weibull")
d1 <- data.frame(TTF = dat_3.2$TTF[-1])
d2 <- data.frame(TTF = dat_3.3$TTF[-1])
d3 <- data.frame(TTF = dat_3.4$TTF[-1])
fit_d1 <- fitdistr(d1$TTF, "weibull")
fit_d2 <- fitdistr(d2$TTF, "weibull")
fit_d3 <- fitdistr(d3$TTF, "weibull")
wcdf1 <- ggplot(d1, aes(TTF)) + stat_ecdf(geom = "step", pad = FALSE)+stat_function(fun = pweibull, color = "blue", args = list(fit_d1$estimate[1], fit_d1$estimate[2]))
wcdf2 <- ggplot(d2, aes(TTF)) + stat_ecdf(geom = "step", pad = FALSE)+stat_function(fun = pweibull, color = "red", args = list(fit_d2$estimate[1], fit_d2$estimate[2]))
wcdf3 <- ggplot(d3, aes(TTF)) + stat_ecdf(geom = "step", pad = FALSE)+stat_function(fun = pweibull, color = "yellow", args = list(fit_d3$estimate[1], fit_d3$estimate[2]))
wcdf1
wcdf2
wcdf3
wcdf3 <- ggplot(d3, aes(TTF)) + stat_ecdf(geom = "step", pad = FALSE)+stat_function(fun = pweibull, color = "green", args = list(fit_d3$estimate[1], fit_d3$estimate[2]))
wcdf3
